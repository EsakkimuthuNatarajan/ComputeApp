{
  "version": "tree-0.1",
  "tree": {
    "id": "App",
    "path": "",
    "children": {
      "Tree": {
        "id": "Tree",
        "path": "Tree",
        "constructInfo": {
          "fqn": "@aws-cdk/core.Construct",
          "version": "1.117.0"
        }
      },
      "List-S3-Buckets-Into-Dynamodb": {
        "id": "List-S3-Buckets-Into-Dynamodb",
        "path": "List-S3-Buckets-Into-Dynamodb",
        "children": {
          "S3AssetTable": {
            "id": "S3AssetTable",
            "path": "List-S3-Buckets-Into-Dynamodb/S3AssetTable",
            "children": {
              "Resource": {
                "id": "Resource",
                "path": "List-S3-Buckets-Into-Dynamodb/S3AssetTable/Resource",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::DynamoDB::Table",
                  "aws:cdk:cloudformation:props": {
                    "keySchema": [
                      {
                        "attributeName": "_id",
                        "keyType": "HASH"
                      }
                    ],
                    "attributeDefinitions": [
                      {
                        "attributeName": "_id",
                        "attributeType": "S"
                      }
                    ],
                    "provisionedThroughput": {
                      "readCapacityUnits": 5,
                      "writeCapacityUnits": 5
                    },
                    "tableName": "S3AssetTable"
                  }
                },
                "constructInfo": {
                  "fqn": "@aws-cdk/aws-dynamodb.CfnTable",
                  "version": "1.117.0"
                }
              },
              "ScalingRole": {
                "id": "ScalingRole",
                "path": "List-S3-Buckets-Into-Dynamodb/S3AssetTable/ScalingRole",
                "constructInfo": {
                  "fqn": "@aws-cdk/core.Resource",
                  "version": "1.117.0"
                }
              }
            },
            "constructInfo": {
              "fqn": "@aws-cdk/aws-dynamodb.Table",
              "version": "1.117.0"
            }
          },
          "List-S3-Dynamodb-Function": {
            "id": "List-S3-Dynamodb-Function",
            "path": "List-S3-Buckets-Into-Dynamodb/List-S3-Dynamodb-Function",
            "children": {
              "ServiceRole": {
                "id": "ServiceRole",
                "path": "List-S3-Buckets-Into-Dynamodb/List-S3-Dynamodb-Function/ServiceRole",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "List-S3-Buckets-Into-Dynamodb/List-S3-Dynamodb-Function/ServiceRole/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::IAM::Role",
                      "aws:cdk:cloudformation:props": {
                        "assumeRolePolicyDocument": {
                          "Statement": [
                            {
                              "Action": "sts:AssumeRole",
                              "Effect": "Allow",
                              "Principal": {
                                "Service": "lambda.amazonaws.com"
                              }
                            }
                          ],
                          "Version": "2012-10-17"
                        },
                        "managedPolicyArns": [
                          {
                            "Fn::Join": [
                              "",
                              [
                                "arn:",
                                {
                                  "Ref": "AWS::Partition"
                                },
                                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
                              ]
                            ]
                          },
                          {
                            "Fn::Join": [
                              "",
                              [
                                "arn:",
                                {
                                  "Ref": "AWS::Partition"
                                },
                                ":iam::aws:policy/AmazonS3ReadOnlyAccess"
                              ]
                            ]
                          }
                        ]
                      }
                    },
                    "constructInfo": {
                      "fqn": "@aws-cdk/aws-iam.CfnRole",
                      "version": "1.117.0"
                    }
                  },
                  "DefaultPolicy": {
                    "id": "DefaultPolicy",
                    "path": "List-S3-Buckets-Into-Dynamodb/List-S3-Dynamodb-Function/ServiceRole/DefaultPolicy",
                    "children": {
                      "Resource": {
                        "id": "Resource",
                        "path": "List-S3-Buckets-Into-Dynamodb/List-S3-Dynamodb-Function/ServiceRole/DefaultPolicy/Resource",
                        "attributes": {
                          "aws:cdk:cloudformation:type": "AWS::IAM::Policy",
                          "aws:cdk:cloudformation:props": {
                            "policyDocument": {
                              "Statement": [
                                {
                                  "Action": [
                                    "dynamodb:BatchWriteItem",
                                    "dynamodb:PutItem",
                                    "dynamodb:UpdateItem",
                                    "dynamodb:DeleteItem"
                                  ],
                                  "Effect": "Allow",
                                  "Resource": [
                                    {
                                      "Fn::GetAtt": [
                                        "S3AssetTable4207B402",
                                        "Arn"
                                      ]
                                    },
                                    {
                                      "Ref": "AWS::NoValue"
                                    }
                                  ]
                                }
                              ],
                              "Version": "2012-10-17"
                            },
                            "policyName": "ListS3DynamodbFunctionServiceRoleDefaultPolicy949414EF",
                            "roles": [
                              {
                                "Ref": "ListS3DynamodbFunctionServiceRole87D3DA44"
                              }
                            ]
                          }
                        },
                        "constructInfo": {
                          "fqn": "@aws-cdk/aws-iam.CfnPolicy",
                          "version": "1.117.0"
                        }
                      }
                    },
                    "constructInfo": {
                      "fqn": "@aws-cdk/aws-iam.Policy",
                      "version": "1.117.0"
                    }
                  }
                },
                "constructInfo": {
                  "fqn": "@aws-cdk/aws-iam.Role",
                  "version": "1.117.0"
                }
              },
              "Resource": {
                "id": "Resource",
                "path": "List-S3-Buckets-Into-Dynamodb/List-S3-Dynamodb-Function/Resource",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::Lambda::Function",
                  "aws:cdk:cloudformation:props": {
                    "code": {
                      "zipFile": "# -*- coding: utf-8 -*-\n\nimport boto3\nimport json\nimport logging\nimport os\n\n_s3_client = boto3.client('s3')\n_ddb = boto3.resource('dynamodb')\n\n\ndef _ddb_put_item(item):\n    \"\"\" Insert Item into DynamoDb Table \"\"\"\n    if os.environ.get('DDB_TABLE_NAME'):\n        _ddb_table = _ddb.Table(os.environ.get('DDB_TABLE_NAME'))\n        try:\n            _ddb_table.put_item(Item=item)\n        except Exception as e:\n            raise\n\n\ndef get_bkts_inventory():\n    \"\"\" Generate List of S3 Buckets \"\"\"\n    try:\n        resp = _s3_client.list_buckets()\n        bkt_inventory = {\"buckets\": []}\n        for bkt in resp['Buckets']:\n            bkt_inventory[\"buckets\"].append(bkt[\"Name\"])\n            _ddb_put_item({\"_id\": bkt[\"Name\"]})\n        return bkt_inventory\n    except Exception as e:\n        raise\n\n\ndef lambda_handler(event, context):\n    global LOGGER\n    LOGGER = logging.getLogger()\n    LOGGER.setLevel(level=os.getenv('LOG_LEVEL', 'DEBUG').upper())\n    LOGGER.info(f\"received_event:{event}\")\n\n    resp = {\n        \"statusCode\": 400,\n        \"body\": json.dumps({\"message\": event})\n    }\n\n    try:\n        bkt_inventory = get_bkts_inventory()\n        resp[\"body\"] = json.dumps({\n            \"message\": bkt_inventory\n        })\n        resp['statusCode'] = 200\n    except Exception as e:\n        resp[\"body\"] = json.dumps({\n            \"message\": f\"ERROR:{str(e)}\"\n        })\n\n    return resp\n"
                    },
                    "role": {
                      "Fn::GetAtt": [
                        "ListS3DynamodbFunctionServiceRole87D3DA44",
                        "Arn"
                      ]
                    },
                    "description": "This function will list all the S3 buckets into the DynamoDb",
                    "environment": {
                      "variables": {
                        "LOG_LEVEL": "INFO"
                      }
                    },
                    "functionName": "FucntionToListS3Buckets",
                    "handler": "index.lambda_handler",
                    "reservedConcurrentExecutions": 1,
                    "runtime": "python3.7",
                    "timeout": 3
                  }
                },
                "constructInfo": {
                  "fqn": "@aws-cdk/aws-lambda.CfnFunction",
                  "version": "1.117.0"
                }
              }
            },
            "constructInfo": {
              "fqn": "@aws-cdk/aws-lambda.Function",
              "version": "1.117.0"
            }
          },
          "RunEveryWeek": {
            "id": "RunEveryWeek",
            "path": "List-S3-Buckets-Into-Dynamodb/RunEveryWeek",
            "children": {
              "Resource": {
                "id": "Resource",
                "path": "List-S3-Buckets-Into-Dynamodb/RunEveryWeek/Resource",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::Events::Rule",
                  "aws:cdk:cloudformation:props": {
                    "scheduleExpression": "cron(0 18 ? * MON *)",
                    "state": "ENABLED",
                    "targets": [
                      {
                        "id": "Target0",
                        "arn": {
                          "Fn::GetAtt": [
                            "ListS3DynamodbFunction2E68382F",
                            "Arn"
                          ]
                        }
                      }
                    ]
                  }
                },
                "constructInfo": {
                  "fqn": "@aws-cdk/aws-events.CfnRule",
                  "version": "1.117.0"
                }
              },
              "AllowEventRuleListS3BucketsIntoDynamodbListS3DynamodbFunctionCFB2F046": {
                "id": "AllowEventRuleListS3BucketsIntoDynamodbListS3DynamodbFunctionCFB2F046",
                "path": "List-S3-Buckets-Into-Dynamodb/RunEveryWeek/AllowEventRuleListS3BucketsIntoDynamodbListS3DynamodbFunctionCFB2F046",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::Lambda::Permission",
                  "aws:cdk:cloudformation:props": {
                    "action": "lambda:InvokeFunction",
                    "functionName": {
                      "Fn::GetAtt": [
                        "ListS3DynamodbFunction2E68382F",
                        "Arn"
                      ]
                    },
                    "principal": "events.amazonaws.com",
                    "sourceArn": {
                      "Fn::GetAtt": [
                        "RunEveryWeek22A7B598",
                        "Arn"
                      ]
                    }
                  }
                },
                "constructInfo": {
                  "fqn": "@aws-cdk/aws-lambda.CfnPermission",
                  "version": "1.117.0"
                }
              }
            },
            "constructInfo": {
              "fqn": "@aws-cdk/aws-events.Rule",
              "version": "1.117.0"
            }
          }
        },
        "constructInfo": {
          "fqn": "@aws-cdk/core.Stack",
          "version": "1.117.0"
        }
      }
    },
    "constructInfo": {
      "fqn": "@aws-cdk/core.App",
      "version": "1.117.0"
    }
  }
}